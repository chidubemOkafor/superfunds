/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumberish,
    BytesLike,
    FunctionFragment,
    Result,
    Interface,
    EventFragment,
    AddressLike,
    ContractRunner,
    ContractMethod,
    Listener,
  } from "ethers";
  import type {
    TypedContractEvent,
    TypedDeferredTopicFilter,
    TypedEventLog,
    TypedLogDescription,
    TypedListener,
    TypedContractMethod,
  } from "../common";
  
  export interface FundingInterface extends Interface {
    getFunction(
      nameOrSignature:
        | "contractAddress"
        | "contribute"
        | "contributors"
        | "feePercentage"
        | "issueLink"
        | "maxAmount"
        | "minAmount"
        | "owner"
        | "totalFunds"
        | "unlockTime"
        | "withdraw"
    ): FunctionFragment;
  
    getEvent(
      nameOrSignatureOrTopic:
        | "ContributionMade"
        | "FeeTransferred"
        | "FundsWithdrawn"
    ): EventFragment;
  
    encodeFunctionData(
      functionFragment: "contractAddress",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "contribute",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "contributors",
      values: [AddressLike]
    ): string;
    encodeFunctionData(
      functionFragment: "feePercentage",
      values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "issueLink", values?: undefined): string;
    encodeFunctionData(functionFragment: "maxAmount", values?: undefined): string;
    encodeFunctionData(functionFragment: "minAmount", values?: undefined): string;
    encodeFunctionData(functionFragment: "owner", values?: undefined): string;
    encodeFunctionData(
      functionFragment: "totalFunds",
      values?: undefined
    ): string;
    encodeFunctionData(
      functionFragment: "unlockTime",
      values?: undefined
    ): string;
    encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  
    decodeFunctionResult(
      functionFragment: "contractAddress",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "contribute", data: BytesLike): Result;
    decodeFunctionResult(
      functionFragment: "contributors",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "feePercentage",
      data: BytesLike
    ): Result;
    decodeFunctionResult(functionFragment: "issueLink", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "maxAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "minAmount", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "totalFunds", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "unlockTime", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  }
  
  export namespace ContributionMadeEvent {
    export type InputTuple = [
      owner: AddressLike,
      sender: AddressLike,
      amount: BigNumberish,
      totalAmount: BigNumberish
    ];
    export type OutputTuple = [
      owner: string,
      sender: string,
      amount: bigint,
      totalAmount: bigint
    ];
    export interface OutputObject {
      owner: string;
      sender: string;
      amount: bigint;
      totalAmount: bigint;
    }
    export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
  }
  
  export namespace FeeTransferredEvent {
    export type InputTuple = [factoryOwner: AddressLike, fee: BigNumberish];
    export type OutputTuple = [factoryOwner: string, fee: bigint];
    export interface OutputObject {
      factoryOwner: string;
      fee: bigint;
    }
    export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
  }
  
  export namespace FundsWithdrawnEvent {
    export type InputTuple = [owner: AddressLike, amount: BigNumberish];
    export type OutputTuple = [owner: string, amount: bigint];
    export interface OutputObject {
      owner: string;
      amount: bigint;
    }
    export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
  }
  
  export interface Funding extends BaseContract {
    connect(runner?: ContractRunner | null): Funding;
    waitForDeployment(): Promise<this>;
  
    interface: FundingInterface;
  
    queryFilter<TCEvent extends TypedContractEvent>(
      event: TCEvent,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(
      filter: TypedDeferredTopicFilter<TCEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;
  
    on<TCEvent extends TypedContractEvent>(
      event: TCEvent,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
    on<TCEvent extends TypedContractEvent>(
      filter: TypedDeferredTopicFilter<TCEvent>,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
  
    once<TCEvent extends TypedContractEvent>(
      event: TCEvent,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
    once<TCEvent extends TypedContractEvent>(
      filter: TypedDeferredTopicFilter<TCEvent>,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
  
    listeners<TCEvent extends TypedContractEvent>(
      event: TCEvent
    ): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(
      event?: TCEvent
    ): Promise<this>;
  
    contractAddress: TypedContractMethod<[], [string], "view">;
  
    contribute: TypedContractMethod<[], [void], "payable">;
  
    contributors: TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
  
    feePercentage: TypedContractMethod<[], [bigint], "view">;
  
    issueLink: TypedContractMethod<[], [string], "view">;
  
    maxAmount: TypedContractMethod<[], [bigint], "view">;
  
    minAmount: TypedContractMethod<[], [bigint], "view">;
  
    owner: TypedContractMethod<[], [string], "view">;
  
    totalFunds: TypedContractMethod<[], [bigint], "view">;
  
    unlockTime: TypedContractMethod<[], [bigint], "view">;
  
    withdraw: TypedContractMethod<[], [void], "nonpayable">;
  
    getFunction<T extends ContractMethod = ContractMethod>(
      key: string | FunctionFragment
    ): T;
  
    getFunction(
      nameOrSignature: "contractAddress"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
      nameOrSignature: "contribute"
    ): TypedContractMethod<[], [void], "payable">;
    getFunction(
      nameOrSignature: "contributors"
    ): TypedContractMethod<[arg0: AddressLike], [bigint], "view">;
    getFunction(
      nameOrSignature: "feePercentage"
    ): TypedContractMethod<[], [bigint], "view">;
    getFunction(
      nameOrSignature: "issueLink"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
      nameOrSignature: "maxAmount"
    ): TypedContractMethod<[], [bigint], "view">;
    getFunction(
      nameOrSignature: "minAmount"
    ): TypedContractMethod<[], [bigint], "view">;
    getFunction(
      nameOrSignature: "owner"
    ): TypedContractMethod<[], [string], "view">;
    getFunction(
      nameOrSignature: "totalFunds"
    ): TypedContractMethod<[], [bigint], "view">;
    getFunction(
      nameOrSignature: "unlockTime"
    ): TypedContractMethod<[], [bigint], "view">;
    getFunction(
      nameOrSignature: "withdraw"
    ): TypedContractMethod<[], [void], "nonpayable">;
  
    getEvent(
      key: "ContributionMade"
    ): TypedContractEvent<
      ContributionMadeEvent.InputTuple,
      ContributionMadeEvent.OutputTuple,
      ContributionMadeEvent.OutputObject
    >;
    getEvent(
      key: "FeeTransferred"
    ): TypedContractEvent<
      FeeTransferredEvent.InputTuple,
      FeeTransferredEvent.OutputTuple,
      FeeTransferredEvent.OutputObject
    >;
    getEvent(
      key: "FundsWithdrawn"
    ): TypedContractEvent<
      FundsWithdrawnEvent.InputTuple,
      FundsWithdrawnEvent.OutputTuple,
      FundsWithdrawnEvent.OutputObject
    >;
  
    filters: {
      "ContributionMade(address,address,uint256,uint256)": TypedContractEvent<
        ContributionMadeEvent.InputTuple,
        ContributionMadeEvent.OutputTuple,
        ContributionMadeEvent.OutputObject
      >;
      ContributionMade: TypedContractEvent<
        ContributionMadeEvent.InputTuple,
        ContributionMadeEvent.OutputTuple,
        ContributionMadeEvent.OutputObject
      >;
  
      "FeeTransferred(address,uint256)": TypedContractEvent<
        FeeTransferredEvent.InputTuple,
        FeeTransferredEvent.OutputTuple,
        FeeTransferredEvent.OutputObject
      >;
      FeeTransferred: TypedContractEvent<
        FeeTransferredEvent.InputTuple,
        FeeTransferredEvent.OutputTuple,
        FeeTransferredEvent.OutputObject
      >;
  
      "FundsWithdrawn(address,uint256)": TypedContractEvent<
        FundsWithdrawnEvent.InputTuple,
        FundsWithdrawnEvent.OutputTuple,
        FundsWithdrawnEvent.OutputObject
      >;
      FundsWithdrawn: TypedContractEvent<
        FundsWithdrawnEvent.InputTuple,
        FundsWithdrawnEvent.OutputTuple,
        FundsWithdrawnEvent.OutputObject
      >;
    };
  }
  