/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
    BaseContract,
    BigNumberish,
    BytesLike,
    FunctionFragment,
    Result,
    Interface,
    EventFragment,
    AddressLike,
    ContractRunner,
    ContractMethod,
    Listener,
  } from "ethers"
  import type {
    TypedContractEvent,
    TypedDeferredTopicFilter,
    TypedEventLog,
    TypedLogDescription,
    TypedListener,
    TypedContractMethod,
  } from "./common";
  
  export interface CreateFundingInterface extends Interface {
    getEventTopic(arg0: EventFragment): unknown;
    getFunction(
      nameOrSignature: "FundingArray" | "createNewFunding"
    ): FunctionFragment;
  
    getEvent(nameOrSignatureOrTopic: "CreateFundingEvent"): EventFragment;
  
    encodeFunctionData(
      functionFragment: "FundingArray",
      values: [BigNumberish]
    ): string;
    encodeFunctionData(
      functionFragment: "createNewFunding",
      values: [string, BigNumberish, BigNumberish, BigNumberish]
    ): string;
  
    decodeFunctionResult(
      functionFragment: "FundingArray",
      data: BytesLike
    ): Result;
    decodeFunctionResult(
      functionFragment: "createNewFunding",
      data: BytesLike
    ): Result;
  }
  
  export namespace CreateFundingEventEvent {
    export type InputTuple = [
      creator: AddressLike,
      fundingName: string,
      target: BigNumberish,
      unlockTime: BigNumberish,
      minimumAmount: BigNumberish
    ];
    export type OutputTuple = [
      creator: string,
      fundingName: string,
      target: bigint,
      unlockTime: bigint,
      minimumAmount: bigint
    ];
    export interface OutputObject {
      creator: string;
      fundingName: string;
      target: bigint;
      unlockTime: bigint;
      minimumAmount: bigint;
    }
    export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
    export type Filter = TypedDeferredTopicFilter<Event>;
    export type Log = TypedEventLog<Event>;
    export type LogDescription = TypedLogDescription<Event>;
  }
  
  export interface CreateFunding extends BaseContract {
    connect(runner?: ContractRunner | null): CreateFunding;
    waitForDeployment(): Promise<this>;
  
    interface: CreateFundingInterface;
  
    queryFilter<TCEvent extends TypedContractEvent>(
      event: TCEvent,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;
    queryFilter<TCEvent extends TypedContractEvent>(
      filter: TypedDeferredTopicFilter<TCEvent>,
      fromBlockOrBlockhash?: string | number | undefined,
      toBlock?: string | number | undefined
    ): Promise<Array<TypedEventLog<TCEvent>>>;
  
    on<TCEvent extends TypedContractEvent>(
      event: TCEvent,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
    on<TCEvent extends TypedContractEvent>(
      filter: TypedDeferredTopicFilter<TCEvent>,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
  
    once<TCEvent extends TypedContractEvent>(
      event: TCEvent,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
    once<TCEvent extends TypedContractEvent>(
      filter: TypedDeferredTopicFilter<TCEvent>,
      listener: TypedListener<TCEvent>
    ): Promise<this>;
  
    listeners<TCEvent extends TypedContractEvent>(
      event: TCEvent
    ): Promise<Array<TypedListener<TCEvent>>>;
    listeners(eventName?: string): Promise<Array<Listener>>;
    removeAllListeners<TCEvent extends TypedContractEvent>(
      event?: TCEvent
    ): Promise<this>;
  
    FundingArray: TypedContractMethod<[arg0: BigNumberish], [string], "view">;
  
    createNewFunding: TypedContractMethod<
      [
        _name: string,
        _target: BigNumberish,
        _unlockTime: BigNumberish,
        _minimumAmount: BigNumberish
      ],
      [void],
      "nonpayable"
    >;
  
    getFunction<T extends ContractMethod = ContractMethod>(
      key: string | FunctionFragment
    ): T;
  
    getFunction(
      nameOrSignature: "FundingArray"
    ): TypedContractMethod<[arg0: BigNumberish], [string], "view">;
    getFunction(
      nameOrSignature: "createNewFunding"
    ): TypedContractMethod<
      [
        _name: string,
        _target: BigNumberish,
        _unlockTime: BigNumberish,
        _minimumAmount: BigNumberish
      ],
      [void],
      "nonpayable"
    >;
  
    getEvent(
      key: "CreateFundingEvent"
    ): TypedContractEvent<
      CreateFundingEventEvent.InputTuple,
      CreateFundingEventEvent.OutputTuple,
      CreateFundingEventEvent.OutputObject
    >;
  
    filters: {
      "CreateFundingEvent(address,string,uint256,uint256,uint256)": TypedContractEvent<
        CreateFundingEventEvent.InputTuple,
        CreateFundingEventEvent.OutputTuple,
        CreateFundingEventEvent.OutputObject
      >;
      CreateFundingEvent: TypedContractEvent<
        CreateFundingEventEvent.InputTuple,
        CreateFundingEventEvent.OutputTuple,
        CreateFundingEventEvent.OutputObject
      >;
    };
  }
  